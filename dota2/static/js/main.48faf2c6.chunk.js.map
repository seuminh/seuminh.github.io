{"version":3,"sources":["arcana.js","App.js","serviceWorker.js","index.js"],"names":["arcanas","name","nickname","image","Card","_ref","react_default","a","createElement","className","alt","src","CardList","_ref2","map","user","i","key","Searchbox","_ref3","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","filterArcanas","filter","arcana","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAAaA,SAAU,CACrB,CACEC,KAAM,mBACNC,SAAU,KACVC,MAAO,4HAET,CACEF,KAAM,iBACNC,SAAU,KACVC,MAAO,wDAET,CACEF,KAAM,QACNC,SAAU,QACVC,MAAO,mCAET,CACEF,KAAM,KACNC,SAAU,KACVC,MAAO,sEAET,CACEF,KAAM,eACNC,SAAU,KACVC,MAAO,gFAET,CACEF,KAAM,aACNC,SAAU,aACVC,MAAO,uJAET,CACEF,KAAM,UACNC,SAAU,UACVC,MAAO,mCAET,CACEF,KAAM,aACNC,SAAU,KACVC,MAAO,mCAET,CACEF,KAAM,OACNC,SAAU,OACVC,MAAO,gHAET,CACEF,KAAM,SACNC,SAAU,SACVC,MAAO,2GAET,CACCF,KAAM,cACLC,SAAU,KACVC,MAAO,wrBAET,CACCF,KAAM,OACLC,SAAU,OACVC,MAAO,oFAET,CACEF,KAAM,mBACNC,SAAU,KACVC,MAAO,mCAET,CACEF,KAAM,eACNC,SAAU,KACVC,MAAO,mFCjEX,SAASC,EAATC,GAA2B,IAAZF,EAAYE,EAAZF,MAAMF,EAAMI,EAANJ,KACnB,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0DACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAKR,IACtBG,EAAAC,EAAAC,cAAA,cAAMP,EAAN,MAKV,SAASW,EAATC,GAA4B,IAATb,EAASa,EAATb,QACjB,OACEM,EAAAC,EAAAC,cAAA,WAEIR,EAAQc,IAAI,SAACC,EAAKC,GAChB,OACEV,EAAAC,EAAAC,cAACJ,EAAD,CACEa,IAAKD,EACLf,KAAMD,EAAQgB,GAAGf,KACjBE,MAAOH,EAAQgB,GAAGb,WAShC,SAASe,EAATC,GAAmC,IAAfC,EAAeD,EAAfC,aAClB,OACGd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACEC,UAAU,mCACVY,KAAK,SACLC,YAAY,iBACZC,SAAUH,SAkCHI,cA1BZ,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAODI,eAAe,SAACC,GACbR,EAAKS,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAP1CZ,EAAKa,MAAM,CACPtC,QAAQA,EACRmC,YAAY,IAJJV,wEAYL,IAAAc,EAAAX,KACAY,EAAgBZ,KAAKU,MAAMtC,QAAQyC,OAAO,SAAAC,GAC3C,OAAOA,EAAOzC,KAAK0C,cAAcC,SAASL,EAAKD,MAAMH,YAAYQ,gBAAgBD,EAAOxC,SAASyC,cAAcC,SAASL,EAAKD,MAAMH,YAAYQ,iBAEnJ,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAI,QAAQC,IAAI,sEACtCL,EAAAC,EAAAC,cAACU,EAAD,CAAWE,aAAcQ,KAAKI,iBAC9B1B,EAAAC,EAAAC,cAACI,EAAD,CAAUZ,QAASwC,YArBTK,IAAMC,WCjCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.48faf2c6.chunk.js","sourcesContent":["export const arcanas = [\r\n  {\r\n    name: 'Legion Commander',\r\n    nickname: 'LC',\r\n    image: 'https://4.bp.blogspot.com/-nUmgFwS9gTM/WGQUTPJNemI/AAAAAAAACSc/W-fZGaqbtYAGrcHAnAnF-7q8Q0OlEaDZACLcB/s1600/lc_arcana.png'\r\n  },\r\n  {\r\n    name: 'Crystal Maiden',\r\n    nickname: 'CM',\r\n    image: 'https://i.ytimg.com/vi/nlUsPMeIq3U/maxresdefault.jpg'\r\n  },\r\n  {\r\n    name: 'Pudge',\r\n    nickname: 'pudge',\r\n    image: 'https://i.imgur.com/8loyIIs.jpg'\r\n  },\r\n  {\r\n    name: 'IO',\r\n    nickname: 'io',\r\n    image: 'http://cdn.dota2.com/apps/dota2/images/blogfiles/blgimg_iaccde.jpg'\r\n  },\r\n  {\r\n    name: 'Shadow Fiend',\r\n    nickname: 'SF',\r\n    image: 'https://i.pinimg.com/originals/32/d4/5f/32d45fc400eb4c24d60b7197ad8e3f11.jpg'\r\n  },\r\n  {\r\n    name: 'Juggernaut',\r\n    nickname: 'juggernaut',\r\n    image: 'https://imgix.bustle.com/mic/bartojfr1jyxkeuolsul691ze7jl2ryfywlrqgdifgcgwouzrhn3cbsfks87hjke.jpg?w=1020&h=576&fit=crop&crop=faces&auto=format&q=70'\r\n  },\r\n  {\r\n    name: 'Techies',\r\n    nickname: 'techies',\r\n    image: 'https://i.imgur.com/7aOIBC8.jpg'\r\n  },\r\n  {\r\n    name: 'Terroblade',\r\n    nickname: 'TB',\r\n    image: 'https://i.imgur.com/FT2T5n9.jpg'\r\n  },\r\n  {\r\n    name: 'Zeus',\r\n    nickname: 'zeus',\r\n    image: 'https://cdna.artstation.com/p/assets/images/images/010/635/776/large/artem-artificial-8-00000.jpg?1525426533'\r\n  },\r\n  {\r\n    name: 'Rubick',\r\n    nickname: 'rubick',\r\n    image: 'https://steamuserimages-a.akamaihd.net/ugc/954099232386620833/E5ED0B58AF19E4DAB3C241D44AA76BDD04469A05/'\r\n  },\r\n  {\r\n\t  name: 'Monkey King',\r\n    nickname: 'MK',\r\n    image: 'https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/928e8a32-b100-450f-a9ba-67b95f005a95/dascqwx-16a46d97-195e-4f71-aa60-d47e641f4801.jpg/v1/fill/w_750,h_1065,q_70,strp/_dota_2___monkey_king_by_kazu67_dascqwx-pre.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7ImhlaWdodCI6Ijw9MTQ1MyIsInBhdGgiOiJcL2ZcLzkyOGU4YTMyLWIxMDAtNDUwZi1hOWJhLTY3Yjk1ZjAwNWE5NVwvZGFzY3F3eC0xNmE0NmQ5Ny0xOTVlLTRmNzEtYWE2MC1kNDdlNjQxZjQ4MDEuanBnIiwid2lkdGgiOiI8PTEwMjQifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6aW1hZ2Uub3BlcmF0aW9ucyJdfQ.PrOfJ8GBV3KeodKwPeY5bbDsrTfHpPytqAI1_RLwWuc'\r\n  },\r\n  {\r\n\t  name: 'Lina',\r\n    nickname: 'lina',\r\n    image: 'http://fc09.deviantart.net/fs70/f/2011/210/0/b/dota2_lina_by_2befine-d4209o5.png'\r\n  },\r\n  {\r\n    name: 'Phantom Assassin',\r\n    nickname: 'PA',\r\n    image: 'https://i.imgur.com/WHPaFNG.jpg'\r\n  },\r\n  {\r\n    name: 'Earth Shaker',\r\n    nickname: 'ES',\r\n    image: 'https://steamcdn-a.akamaihd.net/apps/dota2/images/planetfall/model-poster.png'\r\n  }\r\n];\r\n","import React from 'react';\nimport './App.css';\nimport {arcanas} from './arcana';\n\nfunction Card({image,name}){\n  return(\n      <div className=\"tc bg-dark-blue dib br3 pa2 ma3 grow bw2 shadow-5 card\">\n          <img alt='Robot' src={image}/>\n          <h2> {name} </h2>\n      </div>\n  );\n}\n\nfunction CardList({arcanas}){\n  return(\n    <div>\n        {\n        arcanas.map((user,i)=>{\n          return (\n            <Card \n              key={i}\n              name={arcanas[i].name} \n              image={arcanas[i].image} \n             />\n            );\n        })\n        }\n    </div>\n  );\n}\n\nfunction Searchbox({searchChange}) {\n  return (\n     <div className=\"pa2\">\n      <input \n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\" \n        placeholder=\"Search Arcanas\" \n        onChange={searchChange}\n        />\n     </div>\n  );\n}\n\n\nclass App extends React.Component {\n   constructor(){\n    super();\n    this.state={\n        arcanas:arcanas,\n        searchfield:''\n    }\n  }\n\n   onSearchChange=(event)=>{\n      this.setState({searchfield:event.target.value});\n   }\n\n   render(){\n     const filterArcanas = this.state.arcanas.filter(arcana=>{\n          return arcana.name.toLowerCase().includes(this.state.searchfield.toLowerCase())||arcana.nickname.toLowerCase().includes(this.state.searchfield.toLowerCase());\n      });\n      return (\n        <div className=\"tc\">\n        <img className=\"logo\" alt=\"dota2\" src='https://www.sccpre.cat/mypng/full/203-2034457_dota-2-logo-png.png'/>\n        <Searchbox searchChange={this.onSearchChange}/>\n        <CardList arcanas={filterArcanas}/>\n        </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}